# https://taskfile.dev

version: '3'

dotenv: ['.development.env']

tasks:
  # ==================================================================================== #
  # HELPERS
  # ==================================================================================== #

  default:
    desc: List all available tasks
    cmds:
      - task --list
    silent: true

  # ==================================================================================== #
  # DEVELOPMENT
  # ==================================================================================== #

  db:migrations:new:
    desc: Create a new database migration
    summary: |
      Create a new database migration

      It will create a new database migration into
      migrations folder, the name must be provided.
    cmds:
      - migrate create -seq -ext=.sql -dir=./internal/database/migrations {{.CLI_ARGS}}
    silent: true

  db:migrations:up:
    desc: Apply all or N up migrations
    summary: |
      Apply all or N up migrations

      It will apply all or N migrations to the database
      or up to n number of migrations passed as argument.
    cmds:
      - migrate -path ./internal/database/migrations -database="postgres://${DATABASE_DSN}" -verbose up {{.CLI_ARGS}}
    silent: true

  db:migrations:down:
    desc: Revert all or N migrations in database
    summary: |
      Revert all or N migrations in database

      It will revert all or N migrations in the database.
    cmds:
      - migrate -path ./internal/database/migrations -database="postgres://${DATABASE_DSN}" -verbose down {{.CLI_ARGS}}
    silent: true

  db:migrations:drop:
    desc: Drop the all tables in the database
    summary: |
      Drop the all tables in the database

      It will drop all tables in the database, including the migrations one.
    cmds:
      - migrate -path ./internal/database/migrations -database="postgres://${DATABASE_DSN}" -verbose drop -f
    silent: true

  db:gen:
    desc: Generate Go code to interact with database using sqlc
    summary: |
      Generate Go code to interact with database using sqlc.
    cmds:
      - sqlc generate
    silent: true

  db:init:
    desc: Insert initial values in database
    summary: |
      Insert initial values in database

      It will create all roles and the root user in the database.
    cmds:
      - go run ./internal/database/init/init.go -db-dsn=${DATABASE_DSN} -root-name=${ROOT_USER_NAME} -root-password=${ROOT_USER_PASSWORD} -root-email=${ROOT_USER_EMAIL}
    silent: true

  db:seed:
    desc: Seed development database
    summary: |
      Seed development database

      It will run sql statements to popoulate the
      database with fake data.
    cmds:
      - go run ./db/seed/seed.go -db-dsn=${DATABASE_DSN}
    silent: true

  dev:
    summary: |
      Starts the api in development mode

      It will start the api in development mode
      watching for file changes. This command is
      used alongside docker to build the development
      environment in Dockerfile.
    cmds:
      - air

    silent: true

  up:
    desc: Starts development environment with docker compose
    summary: |
      Starts development environment with docker compose

      It will starts database and api containers with
      docker compose. The api will be in development
      mode watching for file changes.
    cmds:
      - docker compose --env-file ./.${ENV}.env up -d database api
    silent: true

  stop:
    desc: Stops development environment with docker compose
    summary: |
      Stops development environment with docker compose

      It will stops database and api containers with
      docker compose.
    cmds:
      - docker compose --env-file ./.${ENV}.env stop database api
    silent: true

  config:eval:
    desc: Evaluate config file
    summary: |
      Evaluate config file

      It will evaluate the config file and print
      the result in JSON format.
    cmds:
      - pkl eval -f json ./pkl/DevelopmentConfig.pkl
    silent: true

  config:gen:
    desc: Generate config package based on config file template
    summary: |
      Generate config package based on config file template

      It will generate the config package with pkl-gen-go based on
      the config file template.
    cmds:
      - pkl-gen-go pkl/Config.pkl --base-path github.com/brGuirra/uai
    silent: true

  # ==================================================================================== #
  # QUALITY CONTROL
  # ==================================================================================== #

  vendor:
    desc: 'Tidy and vendor dependencies'
    cmds:
      - echo "Tidying and verifying module dependencies..."
      - go mod tidy
      - go mod verify
      - echo "Vendoring dependencies..."
      - go mod vendor
    silent: true

  test:integration:
    desc: 'Run integration tests'
    dotenv: ['.test.env']
    cmds:
      - docker compose --env-file ./.${ENV}.env up -d database_test
      - gotestsum --format testname ./... -tags=integration -db-dsn="${DATABASE_DSN}" {{.CLI_ARGS}}
      - docker compose --env-file ./.${ENV}.env stop database_test
    silent: true

  audit:
    desc: 'Tidy dependencies and format, vet and test all code'
    summary: |
      Tidy dependencies and format, vet and test all code

      It will tidy dependencies and verify their check sums,
      format the code with the official format tool for Go and
      run static analysis in the project, and run all tests.
    cmds:
      - task vendor
      - echo "Formatting code..."
      - go fmt ./...
      - echo "Vetting code..."
      - go vet ./...
      - staticcheck ./...

      - go test -race -vet=off ./...
    silent: true

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/brGuirra/uai/internal/database/sqlc"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// AddRolesForUser provides a mock function with given fields: ctx, arg
func (_m *Store) AddRolesForUser(ctx context.Context, arg []database.AddRolesForUserParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddRolesForUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.AddRolesForUserParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []database.AddRolesForUserParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []database.AddRolesForUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_AddRolesForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRolesForUser'
type Store_AddRolesForUser_Call struct {
	*mock.Call
}

// AddRolesForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []database.AddRolesForUserParams
func (_e *Store_Expecter) AddRolesForUser(ctx interface{}, arg interface{}) *Store_AddRolesForUser_Call {
	return &Store_AddRolesForUser_Call{Call: _e.mock.On("AddRolesForUser", ctx, arg)}
}

func (_c *Store_AddRolesForUser_Call) Run(run func(ctx context.Context, arg []database.AddRolesForUserParams)) *Store_AddRolesForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.AddRolesForUserParams))
	})
	return _c
}

func (_c *Store_AddRolesForUser_Call) Return(_a0 int64, _a1 error) *Store_AddRolesForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_AddRolesForUser_Call) RunAndReturn(run func(context.Context, []database.AddRolesForUserParams) (int64, error)) *Store_AddRolesForUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAdminUser provides a mock function with given fields: ctx, arg
func (_m *Store) CreateAdminUser(ctx context.Context, arg database.CreateAdminUserParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdminUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateAdminUserParams) (uuid.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateAdminUserParams) uuid.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateAdminUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateAdminUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdminUser'
type Store_CreateAdminUser_Call struct {
	*mock.Call
}

// CreateAdminUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateAdminUserParams
func (_e *Store_Expecter) CreateAdminUser(ctx interface{}, arg interface{}) *Store_CreateAdminUser_Call {
	return &Store_CreateAdminUser_Call{Call: _e.mock.On("CreateAdminUser", ctx, arg)}
}

func (_c *Store_CreateAdminUser_Call) Run(run func(ctx context.Context, arg database.CreateAdminUserParams)) *Store_CreateAdminUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateAdminUserParams))
	})
	return _c
}

func (_c *Store_CreateAdminUser_Call) Return(_a0 uuid.UUID, _a1 error) *Store_CreateAdminUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateAdminUser_Call) RunAndReturn(run func(context.Context, database.CreateAdminUserParams) (uuid.UUID, error)) *Store_CreateAdminUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCredentials provides a mock function with given fields: ctx, arg
func (_m *Store) CreateCredentials(ctx context.Context, arg database.CreateCredentialsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCredentials")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateCredentialsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_CreateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCredentials'
type Store_CreateCredentials_Call struct {
	*mock.Call
}

// CreateCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateCredentialsParams
func (_e *Store_Expecter) CreateCredentials(ctx interface{}, arg interface{}) *Store_CreateCredentials_Call {
	return &Store_CreateCredentials_Call{Call: _e.mock.On("CreateCredentials", ctx, arg)}
}

func (_c *Store_CreateCredentials_Call) Run(run func(ctx context.Context, arg database.CreateCredentialsParams)) *Store_CreateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateCredentialsParams))
	})
	return _c
}

func (_c *Store_CreateCredentials_Call) Return(_a0 error) *Store_CreateCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_CreateCredentials_Call) RunAndReturn(run func(context.Context, database.CreateCredentialsParams) error) *Store_CreateCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Store) CreateUser(ctx context.Context, arg database.CreateUserParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) (uuid.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) uuid.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Store_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateUserParams
func (_e *Store_Expecter) CreateUser(ctx interface{}, arg interface{}) *Store_CreateUser_Call {
	return &Store_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Store_CreateUser_Call) Run(run func(ctx context.Context, arg database.CreateUserParams)) *Store_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateUserParams))
	})
	return _c
}

func (_c *Store_CreateUser_Call) Return(_a0 uuid.UUID, _a1 error) *Store_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateUser_Call) RunAndReturn(run func(context.Context, database.CreateUserParams) (uuid.UUID, error)) *Store_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// ExecTx provides a mock function with given fields: ctx, fn
func (_m *Store) ExecTx(ctx context.Context, fn func(database.Querier) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(database.Querier) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_ExecTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecTx'
type Store_ExecTx_Call struct {
	*mock.Call
}

// ExecTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(database.Querier) error
func (_e *Store_Expecter) ExecTx(ctx interface{}, fn interface{}) *Store_ExecTx_Call {
	return &Store_ExecTx_Call{Call: _e.mock.On("ExecTx", ctx, fn)}
}

func (_c *Store_ExecTx_Call) Run(run func(ctx context.Context, fn func(database.Querier) error)) *Store_ExecTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(database.Querier) error))
	})
	return _c
}

func (_c *Store_ExecTx_Call) Return(_a0 error) *Store_ExecTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_ExecTx_Call) RunAndReturn(run func(context.Context, func(database.Querier) error) error) *Store_ExecTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesByCodes provides a mock function with given fields: ctx, codes
func (_m *Store) GetRolesByCodes(ctx context.Context, codes []string) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, codes)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesByCodes")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]uuid.UUID, error)); ok {
		return rf(ctx, codes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []uuid.UUID); ok {
		r0 = rf(ctx, codes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, codes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetRolesByCodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesByCodes'
type Store_GetRolesByCodes_Call struct {
	*mock.Call
}

// GetRolesByCodes is a helper method to define mock.On call
//   - ctx context.Context
//   - codes []string
func (_e *Store_Expecter) GetRolesByCodes(ctx interface{}, codes interface{}) *Store_GetRolesByCodes_Call {
	return &Store_GetRolesByCodes_Call{Call: _e.mock.On("GetRolesByCodes", ctx, codes)}
}

func (_c *Store_GetRolesByCodes_Call) Run(run func(ctx context.Context, codes []string)) *Store_GetRolesByCodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Store_GetRolesByCodes_Call) Return(_a0 []uuid.UUID, _a1 error) *Store_GetRolesByCodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetRolesByCodes_Call) RunAndReturn(run func(context.Context, []string) ([]uuid.UUID, error)) *Store_GetRolesByCodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Store) GetUserByEmail(ctx context.Context, email string) (database.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type Store_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Store_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *Store_GetUserByEmail_Call {
	return &Store_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *Store_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *Store_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetUserByEmail_Call) Return(_a0 database.User, _a1 error) *Store_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *Store_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

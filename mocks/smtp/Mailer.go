// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Mailer is an autogenerated mock type for the Mailer type
type Mailer struct {
	mock.Mock
}

type Mailer_Expecter struct {
	mock *mock.Mock
}

func (_m *Mailer) EXPECT() *Mailer_Expecter {
	return &Mailer_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: recipient, data, patterns
func (_m *Mailer) Send(recipient string, data interface{}, patterns ...string) error {
	_va := make([]interface{}, len(patterns))
	for _i := range patterns {
		_va[_i] = patterns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, recipient, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...string) error); ok {
		r0 = rf(recipient, data, patterns...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mailer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Mailer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - recipient string
//   - data interface{}
//   - patterns ...string
func (_e *Mailer_Expecter) Send(recipient interface{}, data interface{}, patterns ...interface{}) *Mailer_Send_Call {
	return &Mailer_Send_Call{Call: _e.mock.On("Send",
		append([]interface{}{recipient, data}, patterns...)...)}
}

func (_c *Mailer_Send_Call) Run(run func(recipient string, data interface{}, patterns ...string)) *Mailer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Mailer_Send_Call) Return(_a0 error) *Mailer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mailer_Send_Call) RunAndReturn(run func(string, interface{}, ...string) error) *Mailer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailer creates a new instance of Mailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mailer {
	mock := &Mailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

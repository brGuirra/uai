// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE "users" SET "status" = 'active' WHERE "id" = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createAdminUser = `-- name: CreateAdminUser :one
INSERT INTO
"users" ("name", "email", "status")
VALUES ($1, $2, $3)
RETURNING "id"
`

type CreateAdminUserParams struct {
	Name   string     `json:"name"`
	Email  string     `json:"email"`
	Status UserStatus `json:"status"`
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAdminUser, arg.Name, arg.Email, arg.Status)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
"users" ("name", "email")
VALUES ($1, $2)
RETURNING "id"
`

type CreateUserParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, status, version, updated_at, created_at FROM "users" WHERE "email" = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Status,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, status, version, updated_at, created_at FROM "users" WHERE "id" = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Status,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: employees.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AddRolesForEmployeeParams struct {
	EmployeeID uuid.UUID `json:"employee_id"`
	RoleID     uuid.UUID `json:"role_id"`
	Grantor    uuid.UUID `json:"grantor"`
}

const checkEmployeeEmailExists = `-- name: CheckEmployeeEmailExists :one
SELECT EXISTS(SELECT 1 FROM employees WHERE email = $1) AS user_exists
`

func (q *Queries) CheckEmployeeEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmployeeEmailExists, email)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO
employees (name, email, status, hashed_password)
VALUES
($1, $2, $3, $4)
RETURNING id, name, email, status
`

type CreateEmployeeParams struct {
	Name           string      `json:"name"`
	Email          string      `json:"email"`
	Status         string      `json:"status"`
	HashedPassword pgtype.Text `json:"hashed_password"`
}

type CreateEmployeeRow struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Email  string    `json:"email"`
	Status string    `json:"status"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (CreateEmployeeRow, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.Name,
		arg.Email,
		arg.Status,
		arg.HashedPassword,
	)
	var i CreateEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Status,
	)
	return i, err
}

const getEmployeeByEmail = `-- name: GetEmployeeByEmail :one
SELECT id, name, email, hashed_password, status FROM employees
WHERE email = $1
`

func (q *Queries) GetEmployeeByEmail(ctx context.Context, email string) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByEmail, email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Status,
	)
	return i, err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id, name, email, hashed_password, status
FROM employees
WHERE id = $1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id uuid.UUID) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Status,
	)
	return i, err
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employees
SET
    name = $2,
    email = $3,
    hashed_password = $4,
    status = $5
WHERE
    id = $1
RETURNING id, name, email, status
`

type UpdateEmployeeParams struct {
	ID             uuid.UUID   `json:"id"`
	Name           string      `json:"name"`
	Email          string      `json:"email"`
	HashedPassword pgtype.Text `json:"hashed_password"`
	Status         string      `json:"status"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.Exec(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.HashedPassword,
		arg.Status,
	)
	return err
}
